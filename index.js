require('dotenv').config();
const axios = require('axios');
const fs = require('fs');

const BOT_TOKEN = process.env.TG_TOKEN;
const CHAT_ID = process.env.TG_CHAT_ID;

const pastedUrls = new Set();

async function sendToTelegram(message, prefix = '‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ') {
  try {
    await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      chat_id: CHAT_ID,
      text: `${prefix}:\n\n${message}`,
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', err.message);
  }
}

function extractKeys(text) {
  const lines = text.split('\n');
  return lines.filter(line =>
    /0x[a-fA-F0-9]{64}/.test(line) || /private/i.test(line) || /seed/i.test(line)
  );
}

async function fetchRecentPastes() {
  try {
    const res = await axios.get('https://paste.ee/latest');
    const body = res.data;
    const matches = [...body.matchAll(/href="(\/p\/[a-zA-Z0-9]+)"/g)];
    return matches.map(m => `https://paste.ee${m[1]}`).slice(0, 5);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞—Å—Ç:', err.message);
    return [];
  }
}

async function fetchPasteContent(url) {
  try {
    const res = await axios.get(url);
    return res.data;
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Å—Ç—ã: ${url}`, err.message);
    return '';
  }
}

async function scanPastebinSources() {
  const links = await fetchRecentPastes();
  for (let url of links) {
    if (pastedUrls.has(url)) continue; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ
    pastedUrls.add(url);

    const content = await fetchPasteContent(url);
    const found = extractKeys(content);

    if (found.length > 0) {
      await sendToTelegram(found.join('\n'), `üîê Pastebin HIT: ${url}`);
    }
  }
}

async function mainLoop() {
  console.log('üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –ø–æ–∏—Å–∫–∞...');
  while (true) {
    try {
      await scanPastebinSources();
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ:', err.message);
    }

    await new Promise(resolve => setTimeout(resolve, 10000)); // –ø–∞—É–∑–∞ 10 —Å–µ–∫
  }
}

mainLoop();

const { fetchPasteLinks } = require('./scraper');

setInterval(async () => {
  console.log('üîÅ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –ø–æ–∏—Å–∫–∞ –ø–∞—Å—Ç:');
  const foundLinks = await fetchPasteLinks();
  await processLinks(foundLinks);
  console.log('üß© –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫:', foundLinks.length);

  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ–∫–∏–Ω—É—Ç—å foundLinks –¥–∞–ª—å—à–µ (–≤ fetcher –∏–ª–∏ –¥—Ä—É–≥—É—é –æ—á–µ—Ä–µ–¥—å)
}, 5 * 60 * 1000); // –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
